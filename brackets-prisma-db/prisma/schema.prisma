generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//  |----------------------------------------|
//  | Contains all the string union types.
//  |----------------------------------------|

// The only supported types of stage.
enum StageType {
  ROUND_ROBIN
  SINGLE_ELIMINATION
  DOUBLE_ELIMINATION
}

//  The possible types for a double elimination stage's grand final.
enum GrandFinalType {
  NONE
  SIMPLE
  DOUBLE
}

// The possible modes for a round-robin stage.
enum RoundRobinMode {
  SIMPLE
  DOUBLE
}

// Used to order seeds.
enum SeedOrdering {
  NATURAL
  REVERSE
  HALF_SHIFT
  REVERSE_HALF_SHIFT
  PAIR_FLIP
  INNER_OUTER
  GROUPS_EFFORT_BALANCED
  GROUPS_SEED_OPTIMIZED
  GROUPS_BRACKET_OPTIMIZED
}

// The possible results of a duel for a participant.
enum MatchResult {
  WIN
  DRAW
  LOSS
}

//  |-----------------------------------------------------------------------|
//  | Contains the rest of the types which don't belong to the other files.
//  |-----------------------------------------------------------------------|

// The possible status for a match.
enum MatchStatus {
  // The two matches leading to this one are not completed yet.
  LOCKED
  // One participant is ready and waiting for the other one.
  WAITING
  // Both participants are ready to start.
  READY
  // The match is running.
  RUNNING
  // The match is completed.
  COMPLETED
  // At least one participant completed his following match.
  ARCHIVED
}

// The results of a participant in a match.
model ParticipantMatchResult {
  id            Int          @id @default(autoincrement())
  // If `null`, the participant is to be determined.
  participantId Int?
  participant   Participant? @relation(fields: [participantId], references: [id])
  // Indicates where the participant comes from.
  position      Int?
  // If this participant forfeits, the other automatically wins.
  forfeit       Boolean?
  // The current score of the participant.
  score         Int?
  // Tells what is the result of a duel for this participant.
  result        MatchResult?

  opponent1MatchId Int?   @unique
  opponent1Match   Match? @relation("opponent1", fields: [opponent1MatchId], references: [id])

  opponent2MatchId Int?   @unique
  opponent2Match   Match? @relation("opponent2", fields: [opponent2MatchId], references: [id])
}

// The results of a participant in a match game.
model ParticipantMatchGameResult {
  id            Int          @id @default(autoincrement())
  // If `null`, the participant is to be determined.
  participantId Int?
  participant   Participant? @relation(fields: [participantId], references: [id])
  // Indicates where the participant comes from.
  position      Int?
  // If this participant forfeits, the other automatically wins.
  forfeit       Boolean?
  // The current score of the participant.
  score         Int?
  // Tells what is the result of a duel for this participant.
  result        MatchResult?

  opponent1MatchGameId Int?       @unique
  opponent1MatchGame   MatchGame? @relation("opponent1", fields: [opponent1MatchGameId], references: [id])

  opponent2MatchGameId Int?       @unique
  opponent2MatchGame   MatchGame? @relation("opponent2", fields: [opponent2MatchGameId], references: [id])
}

//  |----------------------------------------------------------------|
//  | Contains the types which are persisted in the chosen storage.
//  |----------------------------------------------------------------|

// A participant of a stage (team or individual).
model Participant {
  id Int @id @default(autoincrement())

  tournamentId Int

  // Name of the participant
  name String

  // Additional data for the participant
  extra Json?

  // Match results of the participant in the tournament
  matchResults     ParticipantMatchResult[]
  // Match game results of the participant in the tournament
  matchGameResults ParticipantMatchGameResult[]
}

// A stage, which can be a round-robin stage or a single/double elimination stage.
model Stage {
  id Int @id @default(autoincrement())

  tournamentId Int

  // Name of the stage
  name String

  // Type of the stage
  type StageType

  // Settings of the stage
  settings StageSettings?

  // The number of the stage in its tournament
  number Int

  // The group of this stage
  groups     Group[]
  // The rounds of this stage
  rounds     Round[]
  // The matches of this stage
  matches    Match[]
  // The match games of this stage
  matchGames MatchGame[]
}

// A group of a stage.
model Group {
  id Int @id @default(autoincrement())

  // ID of the parent stage.
  stageId Int
  stage   Stage @relation(fields: [stageId], references: [id])

  // The number of the group in its stage
  number Int

  // The rounds of this group
  rounds Round[]

  // The matches of this group
  matches Match[]
}

// A round of a group.
model Round {
  id Int @id @default(autoincrement())

  // ID of the parent stage.
  stageId Int
  stage   Stage @relation(fields: [stageId], references: [id])

  // ID of the parent group.
  groupId Int
  group   Group @relation(fields: [groupId], references: [id])

  // The number of the round in its group
  number Int

  // The matches of this round
  matches Match[]
}

model Match {
  id Int @id @default(autoincrement())

  // Status of the match.
  status MatchStatus

  // First opponent of the match.
  opponent1Result ParticipantMatchResult? @relation("opponent1")

  // Second opponent of the match.
  opponent2Result ParticipantMatchResult? @relation("opponent2")

  // ID of the parent stage.
  stageId Int
  stage   Stage @relation(fields: [stageId], references: [id])

  // ID of the parent group.
  groupId Int
  group   Group @relation(fields: [groupId], references: [id])

  roundId Int
  round   Round @relation(fields: [roundId], references: [id])

  // The number of the match in its round
  number Int

  // The count of match games this match has. Can be `0` if it's a simple match, or a positive number for "Best Of" matches.
  childCount Int

  // The games of the match
  games MatchGame[]

  // Additional data for the match
  extra Json?
}

model MatchGame {
  id Int @id @default(autoincrement())

  // Status of the match.
  status MatchStatus

  // First opponent of the match.
  opponent1Result ParticipantMatchGameResult? @relation("opponent1")

  // Second opponent of the match.
  opponent2Result ParticipantMatchGameResult? @relation("opponent2")

  // ID of the parent stage.
  stageId Int
  stage   Stage @relation(fields: [stageId], references: [id])

  // ID of the parent match.
  matchId Int
  match   Match @relation(fields: [matchId], references: [id])

  // The number of the match in its round
  number Int
}

//  |----------------------------------------------------------------|
//  | Contains everything which is given by the user as input.
//  |----------------------------------------------------------------|

// The possible settings for a stage.
model StageSettings {
  id String @id @default(uuid()) @db.Uuid

  stageId Int   @unique
  stage   Stage @relation(fields: [stageId], references: [id])

  // The number of participants
  size Int?

  // A list of ordering methods to apply to the seeding.
  // 
  // - For a round-robin stage: 1 item required (**with** `"groups."` prefix).
  //   - Used to distribute in groups.
  // - For a simple elimination stage, 1 item required (**without** `"groups."` prefix).
  //   - Used to distribute in round 1.
  // - For a double elimination stage, 1 item required, 3+ items supported (**without** `"groups."` prefix).
  //   - Item 1 (required) - Used to distribute in WB round 1.
  //   - Item 2 - Used to distribute WB losers in LB round 1.
  //   - Items 3+ - Used to distribute WB losers in LB minor rounds (1 per round).
  seedOrdering SeedOrdering[]

  // Whether to balance BYEs in the seeding of an elimination stage.
  // This prevents having BYE against BYE in matches.
  balanceByes Boolean?

  // All matches of the stage will have this child count.
  // This can later be overridden for certain groups, rounds or matches.
  matchesChildCount Int?

  // Number of groups in a round-robin stage.
  groupCount Int?

  // The mode for the round-robin stage.
  //
  // - If `simple`, each participant plays each opponent once.
  // - If `double`, each participant plays each opponent twice, once at home and once away.
  roundRobinMode RoundRobinMode?

  // A list of seeds per group for a round-robin stage to be manually ordered.
  //
  // Seed ordering is ignored if this property is given.
  // **Hint**: Should be Int[][]
  manualOrdering Json?

  // Optional final between semi-final losers.
  consolationFinal Boolean?

  // Whether to skip the first round of the WB of a double elimination stage.
  skipFirstRound Boolean?

  // Optional grand final between WB and LB winners.
  //
  // - If `none`, there is no grand final.
  // - If `simple`, the final is a single match. The winner is the winner of the stage.
  // - If `double`, if the WB winner wins, he's the winner of the stage. But if he loses, the final is reset and there is a very last match.
  // It might be fairer since it gives the WB winner the right to lose once during the stage...
  grandFinal GrandFinalType?
}
